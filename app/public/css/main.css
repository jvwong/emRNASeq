html,body{font-family:"Lato", Helvetica, Arial, sans-serif;font-size:17px;font-weight:300;line-height:1.5;color:#34495e}h1,h2,h3,h4,h5,h6{font-family:"Lato", Helvetica, Arial, sans-serif;font-weight:600;color:#34495e;letter-spacing:-.5px;margin-top:0.625rem;margin-bottom:0.625rem}h2,h3{margin-top:2.875rem;margin-bottom:0.6875rem}@media (min-width: 38em){html,body{font-size:16px}}p{text-align:justify;margin-bottom:1.375rem}.container{max-width:50rem;min-width:18rem;margin-left:auto;margin-right:auto}#ajax-spinner{position:fixed;z-index:2;top:25%;left:50%}.em-shell{margin-bottom:10em}.fixed-panel{max-height:25em;overflow-y:scroll}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
